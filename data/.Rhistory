table(stroop$color)
table(stroop$reaction.time)
words <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/words.csv",header=TRUE, sep=",", dec=".")
n <- nrow (stroop)
sense <- type <- congruency <- rep (NA, n)
for (i in seq (1, n)) {
w <- stroop$word [i]
idx <- which (words [, 1] == w)
sense [i] <- words$sense [idx]
type [i] <- words$type [idx]
congruency [i] <- ifelse (stroop$color [i] == words$congruent.color [idx], "congruent","incongruent")
}
stroop$fm.lm <- lm (reaction.time ~ subject * type * sense * congruency,
stroop)
anova(fm.lm)
sense <- sense
stroop$type <- type
stroop$congruency <- congruency
df <- aggregate (reaction.time ~ subject * type * sense * congruency,
stroop, mean)
boxplot (reaction.time ~ type * sense * congruency, df)
stroop$sense <- as.factor(stroop$sense)
stroop$congruency <- as.factor(stroop$congruency)
stroop$type <- as.factor(stroop$type)
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
library (lme4)
library (lmerTest)
fm.lmer <- lmer (reaction.time ~ subject * type * sense * congruency + (1| subject), stroop)
### Effet du facteur alÃ©atoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
stroop <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/stroop-lorentz-exp1.csv",header=TRUE, sep=",", dec=".")
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
stroop <- as.data.frame(stroop)
str(stroop)
summary(stroop)
table(stroop$subject)
table(stroop$word)
table(stroop$color)
table(stroop$reaction.time)
words <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/words.csv",header=TRUE, sep=",", dec=".")
n <- nrow (stroop)
sense <- type <- congruency <- rep (NA, n)
for (i in seq (1, n)) {
w <- stroop$word [i]
idx <- which (words [, 1] == w)
sense [i] <- words$sense [idx]
type [i] <- words$type [idx]
congruency [i] <- ifelse (stroop$color [i] == words$congruent.color [idx], "congruent","incongruent")
}
stroop$fm.lm <- lm (reaction.time ~ subject * type * sense * congruency,
stroop)
anova(fm.lm)
sense <- sense
stroop$type <- type
stroop$congruency <- congruency
df <- aggregate (reaction.time ~ subject * type * sense * congruency,
stroop, mean)
boxplot (reaction.time ~ type * sense * congruency, df)
stroop$sense <- as.factor(stroop$sense)
stroop$congruency <- as.factor(stroop$congruency)
stroop$type <- as.factor(stroop$type)
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
library (lme4)
library (lmerTest)
fm.lmer <- lmer (reaction.time ~ type * sense * congruency + (1| subject), stroop)
### Effet du facteur alÃ©atoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
stroop <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/stroop-lorentz-exp1.csv",header=TRUE, sep=",", dec=".")
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
stroop <- as.data.frame(stroop)
str(stroop)
summary(stroop)
table(stroop$subject)
table(stroop$word)
table(stroop$color)
table(stroop$reaction.time)
words <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/words.csv",header=TRUE, sep=",", dec=".")
n <- nrow (stroop)
sense <- type <- congruency <- rep (NA, n)
for (i in seq (1, n)) {
w <- stroop$word [i]
idx <- which (words [, 1] == w)
sense [i] <- words$sense [idx]
type [i] <- words$type [idx]
congruency [i] <- ifelse (stroop$color [i] == words$congruent.color [idx], "congruent","incongruent")
}
sense <- sense
stroop$type <- type
stroop$congruency <- congruency
df <- aggregate (reaction.time ~ subject * type * sense * congruency,
stroop, mean)
boxplot (reaction.time ~ type * sense * congruency, df)
stroop$sense <- as.factor(stroop$sense)
stroop$congruency <- as.factor(stroop$congruency)
stroop$type <- as.factor(stroop$type)
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
stroop$fm.lm <- lm (reaction.time ~ subject * type * sense * congruency,stroop)
anova(fm.lm)
library (lme4)
library (lmerTest)
fm.lmer <- lmer (reaction.time ~ type * sense * congruency + (1| subject), stroop)
### Effet du facteur alÃ©atoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
### Effet du facteur alatoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
stroop <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/stroop-lorentz-exp1.csv",header=TRUE, sep=",", dec=".")
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
stroop <- as.data.frame(stroop)
str(stroop)
summary(stroop)
table(stroop$subject)
table(stroop$word)
table(stroop$color)
table(stroop$reaction.time)
words <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/words.csv",header=TRUE, sep=",", dec=".")
n <- nrow (stroop)
sense <- type <- congruency <- rep (NA, n)
for (i in seq (1, n)) {
w <- stroop$word [i]
idx <- which (words [, 1] == w)
sense [i] <- words$sense [idx]
type [i] <- words$type [idx]
congruency [i] <- ifelse (stroop$color [i] == words$congruent.color [idx], "congruent","incongruent")
}
sense <- sense
stroop$type <- type
stroop$congruency <- congruency
df <- aggregate (reaction.time ~ subject * type * sense * congruency,
stroop, mean)
boxplot (reaction.time ~ type * sense * congruency, df)
stroop$sense <- as.factor(stroop$sense)
stroop$congruency <- as.factor(stroop$congruency)
stroop$type <- as.factor(stroop$type)
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
fm.lm <- lm (reaction.time ~ subject * type * sense * congruency,stroop)
anova(fm.lm)
library (lme4)
library (lmerTest)
fm.lmer <- lmer (reaction.time ~ type * sense * congruency + (1| subject), stroop)
### Effet du facteur alÃ©atoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
stroop <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/stroop-lorentz-exp1.csv",header=TRUE, sep=",", dec=".")
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
stroop <- as.data.frame(stroop)
str(stroop)
summary(stroop)
table(stroop$subject)
table(stroop$word)
table(stroop$color)
table(stroop$reaction.time)
words <- read.csv2("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/TP/TP3/words.csv",header=TRUE, sep=",", dec=".")
n <- nrow (stroop)
sense <- type <- congruency <- rep (NA, n)
for (i in seq (1, n)) {
w <- stroop$word [i]
idx <- which (words [, 1] == w)
sense [i] <- words$sense [idx]
type [i] <- words$type [idx]
congruency [i] <- ifelse (stroop$color [i] == words$congruent.color [idx], "congruent","incongruent")
}
stroop$sense <- sense
stroop$type <- type
stroop$congruency <- congruency
df <- aggregate (reaction.time ~ subject * type * sense * congruency,
stroop, mean)
boxplot (reaction.time ~ type * sense * congruency, df)
stroop$sense <- as.factor(stroop$sense)
stroop$congruency <- as.factor(stroop$congruency)
stroop$type <- as.factor(stroop$type)
stroop$word <- as.factor(stroop$word)
stroop$color <- as.factor(stroop$color)
fm.lm <- lm (reaction.time ~ subject * type * sense * congruency,stroop)
anova(fm.lm)
library (lme4)
library (lmerTest)
fm.lmer <- lmer (reaction.time ~ type * sense * congruency + (1| subject), stroop)
### Effet du facteur alÃ©atoire
ranef (fm.lmer)
plot (ranef (fm.lmer))
ranova (fm.lmer)
### Effets des facteurs fixes
coefficients (fm.lm)
anova (fm.lmer)
files <- list.files("C:\Users\bryan\Documents\Master\Méthode en SC1 Mesures comportementales\Project\RStat\data")
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
subject <- congruence <- preference <- number <- c ()
subj <- 1
for (f in files) {
d <- fromJSON (f)
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "c")
number <- c (number, d[1])
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "i")
number <- c (number, d[2])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "c")
number <- c (number, d[3])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "i")
number <- c (number, d[4])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "c")
number <- c (number, d[5])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "i")
number <- c (number, d[6])
subj <- subj + 1
}
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
boxplot (number ~ preference * congruence + (1|subject), dat)
fm <- lmer (number ~ preference * congruence + (1|subject), dat)
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
library (RJSONIO)
library (lme4)
library (rjsonio)
install.packages('RJSONIO')
install.packages("RJSONIO", repos = "http://www.omegahat.org/R", type = "source")
library(jsonlite)
install.packages(c("C:\Users\bryan\Documents\Master\Méthode", "en", "SC1", "Mesures", "comportementales\Project\RStat\RJSONIO_1.3-1.4.zip"))
install.packages("~/Master/Méthode en SC1 Mesures comportementales/Project/RStat/RJSONIO_1.3-1.4.zip", repos = NULL, type = "win.binary")
library(RJSONIO)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
es("/c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
subject <- congruence <- preference <- number <- c ()
subj <- 1
for (f in files) {
d <- fromJSON (f)
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "c")
number <- c (number, d[1])
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "i")
number <- c (number, d[2])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "c")
number <- c (number, d[3])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "i")
number <- c (number, d[4])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "c")
number <- c (number, d[5])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "i")
number <- c (number, d[6])
subj <- subj + 1
}
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
boxplot (number ~ preference * congruence + (1|subject), dat)
fm <- lmer (number ~ preference * congruence + (1|subject), dat)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
es("/c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
es("/c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files("/c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
list.files("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
list.files("Project/RStat/data")
list.files("Project/RStat/data/")
list.files("Project/RStat/data/.*")
pwd
setwd("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data)
setwd("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data);
setwd("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
files <- list.files("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
subject <- congruence <- preference <- number <- c ()
subj <- 1
for (f in files) {
d <- fromJSON (f)
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "c")
number <- c (number, d[1])
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "i")
number <- c (number, d[2])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "c")
number <- c (number, d[3])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "i")
number <- c (number, d[4])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "c")
number <- c (number, d[5])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "i")
number <- c (number, d[6])
subj <- subj + 1
}
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
boxplot (number ~ preference * congruence + (1|subject), dat)
fm <- lmer (number ~ preference * congruence + (1|subject), dat)
setwd("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
clr
cls
files <- list.files("c/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files
files <- list.files("Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files <- list.files("/RStat/data")
files <- list.files("/RStat/data/")
files <- list.files("/RStat/data/")
files
files <- list.files("/RStat/data/.*")
files
files <- list.files("../RStat/data/")
files
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files
subject <- congruence <- preference <- number <- c ()
subj <- 1
for (f in files) {
d <- fromJSON (f)
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "c")
number <- c (number, d[1])
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "i")
number <- c (number, d[2])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "c")
number <- c (number, d[3])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "i")
number <- c (number, d[4])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "c")
number <- c (number, d[5])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "i")
number <- c (number, d[6])
subj <- subj + 1
}
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
boxplot (number ~ preference * congruence + (1|subject), dat)
fm <- lmer (number ~ preference * congruence + (1|subject), dat)
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
library (RJSONIO)
library (lme4)
library(lmerTest)
library (ggplot2)
library(gplots)
library (emmeans)
setwd("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files <- list.files("C:/Users/bryan/Documents/Master/Méthode en SC1 Mesures comportementales/Project/RStat/data")
files
subject <- congruence <- preference <- number <- c ()
subj <- 1
for (f in files) {
d <- fromJSON (f)
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "c")
number <- c (number, d[1])
subject <- c (subject, subj)
preference <- c (preference, "p")
congruence <- c (congruence, "i")
number <- c (number, d[2])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "c")
number <- c (number, d[3])
subject <- c (subject, subj)
preference <- c (preference, "d")
congruence <- c (congruence, "i")
number <- c (number, d[4])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "c")
number <- c (number, d[5])
subject <- c (subject, subj)
preference <- c (preference, "n")
congruence <- c (congruence, "i")
number <- c (number, d[6])
subj <- subj + 1
}
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
boxplot(number ~  congruence * preference, dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
boxplot(number ~ preference * congruence + (1|subject), dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
"effet simple"
boxplot(number ~ preference, dat)
boxplot(number ~ congruence, dat)
fm <- lmer(number ~ preference * congruence + (1|subject), data=dat)
fm
emmeans (fm, pairwise ~ preference)
anova(fm)
poissonStat <- glmer(number ~ preference * congruence + (1|subject), dat, family = poisson())
anova(poissonStat)
boxplot(number ~  congruence * preference, dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
files
dat <- data.frame (subject = subject, preference = preference,
congruence = congruence, number = number)
View(dat)
View(dat)
boxplot(number ~ preference * congruence + (1|subject), dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
boxplot(number ~  congruence * preference, dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
boxplot(number ~ preference, dat)
boxplot(number ~  congruence * preference, dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
boxplot(number ~ congruence, dat)
fm <- lmer(number ~ preference * congruence + (1|subject), data=dat)
fm
emmeans (fm, pairwise ~ preference)
anova(fm)
poissonStat <- glmer(number ~ preference * congruence + (1|subject), dat, family = poisson())
anova(poissonStat)
emmeans (poissonStat, pairwise ~ preference)
anova(poissonStat)
boxplot(number ~ preference * congruence + (1|subject), dat,
col  = c("#56B4E9","#E69F00","#56B4E9","#E69F00","#56B4E9","#E69F00"))
boxplot(number ~ preference, dat)
